/**
 * Swagger uploadflag
 * This is the YoonMVP API server.  You can find  out more about Swagger at  [http://swagger.io](http://swagger.io) or on  [irc.freenode.net, #swagger](http://swagger.io/irc/). 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: administration@yoon.online
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 1.0.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Claim'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Claim'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerUploadflag) {
      root.SwaggerUploadflag = {};
    }
    root.SwaggerUploadflag.FlagApi = factory(root.SwaggerUploadflag.ApiClient, root.SwaggerUploadflag.Claim);
  }
}(this, function(ApiClient, Claim) {
  'use strict';

  /**
   * Flag service.
   * @module api/FlagApi
   * @version 1.0.0
   */

  /**
   * Constructs a new FlagApi. 
   * @alias module:api/FlagApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteclaim operation.
     * @callback module:api/FlagApi~deleteclaimCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete purchase claim by ID
     * For valid response try integer IDs with positive integer value.\\ \\ Negative or non-integer values will generate API errors
     * @param {Number} claimId ID of the claim that needs to be deleted
     * @param {module:api/FlagApi~deleteclaimCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteclaim = function(claimId, callback) {
      var postBody = null;

      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling deleteclaim");
      }


      var pathParams = {
        'claimId': claimId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/flag/claim/{claimId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getclaimById operation.
     * @callback module:api/FlagApi~getclaimByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Claim} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find purchase claim by ID
     * For valid response try integer IDs with value &gt;&#x3D; 1 and &lt;&#x3D; 10.\\ \\ Other values will generated exceptions
     * @param {Number} claimId ID of upload that needs to be fetched
     * @param {module:api/FlagApi~getclaimByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Claim}
     */
    this.getclaimById = function(claimId, callback) {
      var postBody = null;

      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling getclaimById");
      }


      var pathParams = {
        'claimId': claimId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Claim;

      return this.apiClient.callApi(
        '/flag/claim/{claimId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getclaims operation.
     * @callback module:api/FlagApi~getclaimsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': 'Number'}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns upload inventories by status
     * Returns a map of status codes to quantities
     * @param {module:api/FlagApi~getclaimsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': 'Number'}>}
     */
    this.getclaims = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'Number'};

      return this.apiClient.callApi(
        '/flag/claims', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the placeclaim operation.
     * @callback module:api/FlagApi~placeclaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Claim} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Place an claim for a upload
     * @param {module:model/Claim} body claim placed for purchasing the upload
     * @param {module:api/FlagApi~placeclaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Claim}
     */
    this.placeclaim = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling placeclaim");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Claim;

      return this.apiClient.callApi(
        '/flag/claim', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
