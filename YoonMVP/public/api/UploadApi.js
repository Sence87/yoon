/**
 * Swagger uploadflag
 * This is the YoonMVP API server.  You can find  out more about Swagger at  [http://swagger.io](http://swagger.io) or on  [irc.freenode.net, #swagger](http://swagger.io/irc/). 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: administration@yoon.online
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 1.0.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/Upload'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/Upload'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerUploadflag) {
      root.SwaggerUploadflag = {};
    }
    root.SwaggerUploadflag.UploadApi = factory(root.SwaggerUploadflag.ApiClient, root.SwaggerUploadflag.ApiResponse, root.SwaggerUploadflag.Upload);
  }
}(this, function(ApiClient, ApiResponse, Upload) {
  'use strict';

  /**
   * Upload service.
   * @module api/UploadApi
   * @version 1.0.0
   */

  /**
   * Constructs a new UploadApi. 
   * @alias module:api/UploadApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addupload operation.
     * @callback module:api/UploadApi~adduploadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new upload to the flag
     * @param {module:model/Upload} body upload object that needs to be added to the flag
     * @param {module:api/UploadApi~adduploadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addupload = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addupload");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['uploadflag_auth'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteupload operation.
     * @callback module:api/UploadApi~deleteuploadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a upload
     * @param {Number} uploadId upload id to delete
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/UploadApi~deleteuploadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteupload = function(uploadId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling deleteupload");
      }


      var pathParams = {
        'uploadId': uploadId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api_key': opts['apiKey']
      };
      var formParams = {
      };

      var authNames = ['uploadflag_auth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/upload/{uploadId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the finduploadsByStatus operation.
     * @callback module:api/UploadApi~finduploadsByStatusCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Upload>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds uploads by status
     * Multiple status values can be provided with comma separated strings
     * @param {Array.<module:model/String>} status Status values that need to be considered for filter
     * @param {module:api/UploadApi~finduploadsByStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Upload>}
     */
    this.finduploadsByStatus = function(status, callback) {
      var postBody = null;

      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling finduploadsByStatus");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'status': {
          value: status,
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['uploadflag_auth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = [Upload];

      return this.apiClient.callApi(
        '/upload/findByStatus', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the finduploadsByTags operation.
     * @callback module:api/UploadApi~finduploadsByTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Upload>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds uploads by tags
     * Muliple tags can be provided with comma separated strings. Use\\ \\ tag1, tag2, tag3 for testing.
     * @param {Array.<String>} tags Tags to filter by
     * @param {module:api/UploadApi~finduploadsByTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Upload>}
     */
    this.finduploadsByTags = function(tags, callback) {
      var postBody = null;

      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling finduploadsByTags");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'tags': {
          value: tags,
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['uploadflag_auth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = [Upload];

      return this.apiClient.callApi(
        '/upload/findByTags', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getuploadById operation.
     * @callback module:api/UploadApi~getuploadByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Upload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find upload by ID
     * Returns a single upload
     * @param {Number} uploadId ID of upload to return
     * @param {module:api/UploadApi~getuploadByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Upload}
     */
    this.getuploadById = function(uploadId, callback) {
      var postBody = null;

      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling getuploadById");
      }


      var pathParams = {
        'uploadId': uploadId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Upload;

      return this.apiClient.callApi(
        '/upload/{uploadId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateupload operation.
     * @callback module:api/UploadApi~updateuploadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing upload
     * @param {module:model/Upload} body upload object that needs to be added to the flag
     * @param {module:api/UploadApi~updateuploadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateupload = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateupload");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['uploadflag_auth'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/upload', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateuploadWithForm operation.
     * @callback module:api/UploadApi~updateuploadWithFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a upload in the flag with form data
     * @param {Number} uploadId ID of upload that needs to be updated
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Updated name of the upload
     * @param {String} opts.status Updated status of the upload
     * @param {module:api/UploadApi~updateuploadWithFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateuploadWithForm = function(uploadId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling updateuploadWithForm");
      }


      var pathParams = {
        'uploadId': uploadId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': opts['name'],
        'status': opts['status']
      };

      var authNames = ['uploadflag_auth'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/upload/{uploadId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile operation.
     * @callback module:api/UploadApi~uploadFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * uploads an image
     * @param {Number} uploadId ID of upload to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.additionalMetadata Additional data to pass to server
     * @param {File} opts.file file to upload
     * @param {module:api/UploadApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    this.uploadFile = function(uploadId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling uploadFile");
      }


      var pathParams = {
        'uploadId': uploadId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'additionalMetadata': opts['additionalMetadata'],
        'file': opts['file']
      };

      var authNames = ['uploadflag_auth'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ApiResponse;

      return this.apiClient.callApi(
        '/upload/{uploadId}/uploadImage', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
